{"version":3,"file":"static/js/759.7e733e2d.chunk.js","mappings":"sSAEMA,E,MAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CAAEC,QAAS,sCAGRC,EAAa,mCAAG,sGACJL,EAASM,IAAI,oBAAqB,CACvDH,OAAQ,CAAEI,KAAM,KAFS,uBACnBC,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,qDAObC,EAAY,mCAAG,WAAMC,GAAN,yFACHV,EAASM,IAAI,eAAgB,CAClDH,OAAQ,CAAEO,MAAAA,KAFc,uBAClBF,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,sDAOZG,EAAqB,mCAAG,WAAMC,GAAN,yFACZZ,EAASM,IAAT,gBAAsBM,IADV,uBAC3BJ,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,sDAKrBK,EAAc,mCAAG,WAAMD,GAAN,yFACLZ,EAASM,IAAT,gBAAsBM,EAAtB,aADK,uBACpBJ,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdM,EAAiB,mCAAG,WAAMF,GAAN,yFACRZ,EAASM,IAAT,gBAAsBM,EAAtB,aADQ,uBACvBJ,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qD,wJC7B9B,SAASO,EAAT,GAA6B,IAATP,EAAQ,EAARA,KAEZQ,EAAWR,EAAKS,KAAI,SAAAC,GAAC,OACzB,2BACE,gBAAKC,IAHM,kCAGQD,EAAEE,aAAcC,IAAKH,EAAEI,iBAC1C,wBAAKJ,EAAEK,QACP,uBAAIL,EAAEM,cAHCN,EAAEN,GADc,IAO3B,OAAO,wBAAKI,GACb,CAED,QAEAD,EAASU,aAAe,CACtBjB,KAAM,ICoCR,MA/CA,WACE,OAAwBkB,EAAAA,EAAAA,UAAS,CAC/BC,KAAM,GACNC,SAAS,EACTC,MAAO,OAHT,eAAOrB,EAAP,KAAasB,EAAb,KAMQlB,GAAOmB,EAAAA,EAAAA,MAAPnB,IAERoB,EAAAA,EAAAA,YAAU,WACRF,GAAQ,SAAAG,GAAI,yBACPA,GADO,IAEVL,SAAS,GAFC,IAKZ,IAAMM,EAAS,mCAAG,8GAEKrB,EAAAA,EAAAA,IAAeD,GAFpB,OAERJ,EAFQ,OAIdsB,GAAQ,SAAAG,GAAI,yBACPA,GADO,IAEVL,SAAS,EACTD,KAAMnB,EAAKmB,MAHD,IAJE,gDAUdG,GAAQ,SAAAG,GAAI,yBACPA,GADO,IAEVL,SAAS,EACTC,MAAO,KAAMM,SAHH,IAVE,yDAAH,qDAiBfD,GACD,GAAE,CAACtB,IAEJ,IAAQgB,EAAyBpB,EAAzBoB,QAASC,EAAgBrB,EAAhBqB,MAAOF,EAASnB,EAATmB,KAGxB,OACE,gCACGC,IAAW,uCACZ,SAAC,EAAD,CAAUpB,KAAMmB,IACfE,IAAS,uBAAIA,MAGnB,C","sources":["api.js","components/Cast/CastItem/CastItem.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: { api_key: 'b01160fe65872b7102c85dbc7141a795' },\n});\n\nexport const fetchTrending = async () => {\n  const { data } = await instance.get('trending/all/week', {\n    params: { page: 1 },\n  });\n  return data;\n};\n\nexport const fetchByQuery = async query => {\n  const { data } = await instance.get('search/movie', {\n    params: { query },\n  });\n  return data;\n};\n\nexport const fetchMovieDetailsById = async id => {\n  const { data } = await instance.get(`movie/${id}`);\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await instance.get(`movie/${id}/credits`);\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await instance.get(`movie/${id}/reviews`);\n  return data;\n};\n\n// export default instance;\n","import PropTypes from 'prop-types';\n\nfunction CastItem({ data }) {\n  const imgURL = 'https://image.tmdb.org/t/p/w500';\n  const elements = data.map(e => (\n    <li key={e.id}>\n      <img src={imgURL + e.profile_path} alt={e.original_name} />\n      <h3>{e.name}</h3>\n      <p>{e.character}</p>\n    </li>\n  ));\n  return <ul>{elements}</ul>;\n}\n\nexport default CastItem;\n\nCastItem.dafaultProps = {\n  data: [],\n};\n\nCastItem.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      original_name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCast } from 'api';\n\nimport CastItem from './CastItem';\n\nfunction Cast() {\n  const [data, setData] = useState({\n    cast: [],\n    loading: false,\n    error: null,\n  });\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    setData(prev => ({\n      ...prev,\n      loading: true,\n    }));\n\n    const fetchCast = async () => {\n      try {\n        const data = await fetchMovieCast(id);\n        // console.log(data);\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          cast: data.cast,\n        }));\n      } catch (error) {\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          error: error.message,\n        }));\n      }\n    };\n    fetchCast();\n  }, [id]);\n\n  const { loading, error, cast } = data;\n  // const { poster_path } = movies;\n\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      <CastItem data={cast} />\n      {error && <p>{error}</p>}\n    </>\n  );\n}\n\nexport default Cast;\n"],"names":["instance","axios","baseURL","params","api_key","fetchTrending","get","page","data","fetchByQuery","query","fetchMovieDetailsById","id","fetchMovieCast","fetchMovieReviews","CastItem","elements","map","e","src","profile_path","alt","original_name","name","character","dafaultProps","useState","cast","loading","error","setData","useParams","useEffect","prev","fetchCast","message"],"sourceRoot":""}